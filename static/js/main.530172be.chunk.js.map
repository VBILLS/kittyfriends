{"version":3,"sources":["redux/actions.js","api/api.js","redux/constants.js","components/Header.js","components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","containers/App.js","redux/reducers.js","registerServiceWorker.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Header","className","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","style","overflow","borderTop","height","children","Card","name","email","id","alt","src","CardList","robots","map","user","i","key","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6TAaaA,EAAgB,kBAAM,SAAAC,GCbZ,IAAAC,EDcrBD,EAAS,CAAEE,KEZyB,4BDFfD,EDeb,6CCfqBE,MAAMF,GAAMG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDgBhEF,MAAK,SAAAG,GAAI,OAAIP,EAAS,CAAEE,KEbS,yBFaqBM,QAASD,OAC/DE,OAAM,SAAAC,GAAK,OAAIV,EAAS,CAAEE,KEbM,wBFauBM,QAASE,SGXtDC,EAJA,WACb,OAAO,wBAAIC,UAAU,MAAd,iBCYMC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKH,UAAU,OACb,2BACEA,UAAU,mCACVV,KAAK,SACLc,YAAY,gBACZC,SAAUF,MCOHG,EAdA,SAAAC,GACb,OACE,yBACEC,MAAO,CACLC,SAAU,SACVC,UAAW,kBACXC,OAAQ,UAGTJ,EAAMK,WCQEC,G,MAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKhB,UAAU,6CACb,yBACEiB,IAAI,SACJC,IAAG,+BAA0BF,EAA1B,4BAEL,6BACE,4BAAKF,GACL,2BAAIC,OCSGI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCOhBU,E,YAjBb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDmB,MAAQ,CAAEC,UAAU,GAFR,E,+EAKD7B,EAAO8B,GACvBC,KAAKC,SAAS,CAAEH,UAAU,M,+BAI1B,OAAIE,KAAKH,MAAMC,SACN,uDAEFE,KAAKtB,MAAMK,a,GAdMmB,aCWtBC,G,kMAEFH,KAAKtB,MAAM0B,oB,+BAGH,IAAD,EACoDJ,KAAKtB,MAAxD2B,EADD,EACCA,YAAaC,EADd,EACcA,eAAgBf,EAD9B,EAC8BA,OAAQgB,EADtC,EACsCA,UACvCC,EAAiBjB,EAAOkB,QAAO,SAAAC,GACnC,OAAOA,EAAMzB,KAAK0B,cAAcC,SAASP,EAAYM,kBAEvD,OACE,yBAAKxC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWG,aAAcgC,IACzB,kBAAC,EAAD,KACGC,EACC,uCAEA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUhB,OAAQiB,W,GAnBdN,cA2CHW,eAfS,SAAAhB,GACtB,MAAO,CACLQ,YAAaR,EAAMiB,aAAaT,YAChCd,OAAQM,EAAMvC,cAAciC,OAC5BgB,UAAWV,EAAMvC,cAAciD,cAIR,SAAAhD,GACzB,MAAO,CACL+C,eAAgB,SAAAS,GAAK,OAAIxD,ET3CU,CACrCE,KETiC,sBFUjCM,QSyCmDgD,EAAMC,OAAOC,SAC9Db,gBAAiB,kBAAM7C,EAASD,SAIrBuD,CAA6CV,GCjDtDe,EAAqB,CACzBb,YAAa,IAGTc,EAAqB,CACzBZ,WAAW,EACXhB,OAAQ,ICHJ6B,G,YAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACThE,MAAK,SAAAoE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpC,QACf+B,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBtE,OAAM,SAAAC,GACLoE,QAAQpE,MAAM,4CAA6CA,MCtDjE,IAAMsE,EAAcC,YAAgB,CAAE1B,aFAV,WAA8C,IAA7CjB,EAA4C,uDAApCqB,EAAoBuB,EAAgB,uDAAP,GAChE,OAAQA,EAAOhF,MACb,IRlB+B,sBQmB7B,OAAOiF,OAAOC,OAAO,GAAI9C,EAAO,CAAEQ,YAAaoC,EAAO1E,UACxD,QACE,OAAO8B,IELuCvC,cFSvB,WAA8C,IAA7CuC,EAA4C,uDAApCsB,EAAoBsB,EAAgB,uDAAP,GACjE,OAAQA,EAAOhF,MACb,IRzBkC,yBQ0BhC,OAAOiF,OAAOC,OAAO,GAAI9C,EAAO,CAAEU,WAAW,IAC/C,IR1BkC,yBQ2BhC,OAAOmC,OAAOC,OAAO,GAAI9C,EAAO,CAC9BN,OAAQkD,EAAO1E,QACfwC,WAAW,IAEf,IR9BiC,wBQ+B/B,OAAOmC,OAAOC,OAAO,GAAI9C,EAAO,CAAE5B,MAAOwE,EAAO1E,UAClD,QACE,OAAO8B,MEpBP+C,EAASC,yBACTC,EAAQC,YACZR,EACAS,YAAgBC,IAAiBL,IAGnCM,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDPX,WACb,GAA6C,kBAAmBzB,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,gBAAwBjC,OAAOC,UAC3CiC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAM4B,gBAAN,sBAEPnC,EAwCV,SAAiCO,GAE/BjE,MAAMiE,GACHhE,MAAK,SAAAC,GAGkB,MAApBA,EAAS8F,SACuD,IAAhE9F,EAAS+F,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CjC,UAAUC,cAAciC,MAAMnG,MAAK,SAAAoE,GACjCA,EAAagC,aAAapG,MAAK,WAC7B2D,OAAOC,SAASyC,eAKpBtC,EAAgBC,MAGnB3D,OAAM,WACLqE,QAAQC,IACN,oEA5DA2B,CAAwBtC,GAGxBD,EAAgBC,OCVxBuC,K","file":"static/js/main.530172be.chunk.js","sourcesContent":["import { apiCall } from '../api/api';\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from './constants';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const apiCall = link => fetch(link).then(response => response.json());\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n// const KittyFriendsTypes = {\n//   CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n//   REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n//   REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n//   REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n// }\n","import React from 'react';\n\nconst Header = () => {\n  return <h1 className='f1'>KittyFriends</h1>;\n};\n\nexport default Header;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflow: 'scroll',\n        borderTop: '3px solid black',\n        height: '800px'\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nimport './card.css';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='card tc grow br3 pa3 ma2 dib bw2 shadow-5'>\n      <img\n        alt='robots'\n        src={`https://robohash.org/${id}?size=200x200&set=set4`}\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong...</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { setSearchField, requestRobots } from '../redux/actions';\n\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? (\n            <h1>Loading</h1>\n          ) : (\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nconst initialStateRobots = {\n  isPending: true,\n  robots: []\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload });\n    default:\n      return state;\n  }\n};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport App from './containers/App';\n\nimport { searchRobots, requestRobots } from './redux/reducers';\n\nimport './index.css';\nimport 'tachyons';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}